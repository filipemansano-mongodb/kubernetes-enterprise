apiVersion: mongodb.com/v1
kind: MongoDB
metadata:
  name: rs-0
  namespace: mongodb
  labels:
    type: database
    app: mongodb
spec:
  members: 4
  memberConfig:
    - votes: 1
      priority: "1"
      tags:
        nodeType: "ELECTABLE"
    - votes: 1
      priority: "1.5"
      tags:
        nodeType: "ELECTABLE"
    - votes: 1
      priority: "1.5"
      tags:
        nodeType: "ELECTABLE"
    - votes: 0
      priority: "0"
      tags:
        nodeType: "HIDDEN"
  version: "7.0.9-ent"
  featureCompatibilityVersion: "7.0"

  cloudManager:
    configMapRef:
      name: cloud-manager-config

  credentials: atlas-api-secret
  type: ReplicaSet

  persistent: true

  prometheus:
    passwordSecretRef:
      # SecretRef to a Secret with a 'password' entry on it.
      name: prometheus-password

    # change this value to your Prometheus username
    username: prometheus-username

    # Enables HTTPS on the prometheus scrapping endpoint
    # This should be a reference to a Secret type kuberentes.io/tls
    # tlsSecretKeyRef:
    #   name: <prometheus-tls-cert-secret>

    # Port for Prometheus, default is 9216
    # port: 9216
    #
    # Metrics path for Prometheus, default is /metrics
    # metricsPath: '/metrics'

  podSpec:
    # `podTemplate.spec.containers[].resources` should be specified otherwise, WiredTiger
    # cache won't be calculated properly by MongoDB daemon.
    podTemplate:
      spec:
        containers:
          - name: mongodb-enterprise-database
            volumeMounts:
              - name: mongodb-kmip-client-pem
                mountPath: /kmip/cert
              - name: mongodb-kmip-certificate-authority-pem
                mountPath: /kmip/ca
            # For more information about Pod and container resource management, see:
            # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            resources:
              limits:
                cpu: "2"
                memory: 2Gi
              requests:
                cpu: "1"
                memory: 1Gi
        volumes:
          - name: mongodb-kmip-client-pem
            secret:
              secretName: mongodb-kmip-client-pem
          - name: mongodb-kmip-certificate-authority-pem
            configMap:
              name: mongodb-kmip-certificate-authority-pem
              items:
                - key: ca.pem
                  path: ca.pem
      # Affinity is used to control where pods are scheduled in the cluster.:
      affinity:
        # Pod affinity ensures that a pod is scheduled close to other specific pods.
        #podAffinity:
        #  requiredDuringSchedulingIgnoredDuringExecution:
        #    - labelSelector:
        #        matchExpressions:
        #          - key: security
        #            operator: In
        #            values:
        #              - S1
        #      topologyKey: failure-domain.beta.kubernetes.io/zone
        # Node affinity specifies which cluster nodes pods can be scheduled on, based on node labels.
        #nodeAffinity:
        #  requiredDuringSchedulingIgnoredDuringExecution:
        #    nodeSelectorTerms:
        #      - matchExpressions:
        #          - key: kubernetes.io/e2e-az-name
        #            operator: In
        #            values:
        #              - e2e-az1
        #              - e2e-az2
        #              - e2e-az3
        # Pod anti-affinity prevents multiple pods from being scheduled on the same node
        # ensuring that pods are distributed across different nodes.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rs-0
              topologyKey: "kubernetes.io/hostname"
    persistence:
      multiple:
        data:
          storage: 5Gi
          storageClass: csi-hostpath-sc
          #storageClass: standard
        journal:
          storage: 1Gi
          storageClass: standard
        logs:
          storage: 1Gi
          storageClass: standard
  
  # This will create a TLS enabled Replica Set, which means that all the traffic
  # between members of the Replica Set and clients, will be encrypted using TLS
  # certificates.
  security:
    # The operator will look for a secret name mdb-rs-0-cert
    certsSecretPrefix: mdb
    tls:
      enabled: true
      ca: mongodb-ca-issuer
    authentication:
      enabled: true
       # Valid authentication modes are "SCRAM', "SCRAM-SHA-1", "MONGODB-CR", "X509" and "LDAP"
      modes: ["SCRAM"]
  
  # log level affects the level of logging for the agent. Use DEBUG cautiously
  # as log file size may grow very quickly.
  logLevel: WARN
  
  agent:
    #Automation Agent log rotation
    startupOptions:
      maxLogFiles: "30"
      maxLogFileDurationHrs: "24"
      maxUncompressedLogFiles: "5"

  backup:
    mode: disabled
    snapshotSchedule:
      snapshotIntervalHours: 12
      snapshotRetentionDays: 2
      dailySnapshotRetentionDays: 2
      pointInTimeWindowHours: 60
      referenceHourOfDay: 18
      referenceMinuteOfHour: 0

  # The default TLS mode is 'requireTLS' but it can be customized using the
  # the `additionalMongodConfig` structure. Please find more information here:
  # https://docs.mongodb.com/manual/reference/configuration-options/#net.ssl.mode
  additionalMongodConfig:
    net:
      ssl:
        mode: requireTLS
    # https://www.mongodb.com/pt-br/docs/kubernetes-operator/stable/encryption-at-rest/
    security:
      enableEncryption: true
      kmip:
        clientCertificateFile: /kmip/cert/client.pem
        serverCAFile: /kmip/ca/ca.pem
        serverName: pykmip-server.kmip.svc.cluster.local
        port: 5696