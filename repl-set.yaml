apiVersion: mongodb.com/v1
kind: MongoDB
metadata:
  name: rs-0
  namespace: mongodb
  labels:
    app: "my-app"
spec:
  members: 3
  # https://quay.io/repository/mongodb/mongodb-enterprise-server?tab=tags
  version: "6.0.9-ent"
  featureCompatibilityVersion: "5.0"

  cloudManager:
    configMapRef:
      name: cloud-manager-config

  credentials: atlas-api-secret
  type: ReplicaSet

  # log level affects the level of logging for the agent. Use DEBUG cautiously
  # as log file size may grow very quickly.
  logLevel: WARN

  persistent: false
  podSpec:
    # `podTemplate.spec.containers[].resources` should be specified otherwise, WiredTiger
    # cache won't be calculated properly by MongoDB daemon.
    podTemplate:
      spec:
        containers:
          - name: mongodb-enterprise-database
            #volumeMounts:
            #  - name: mongodb-kmip-client-pem
            #    mountPath: /kmip/cert
            #  - name: mongodb-kmip-certificate-authority-pem
            #    mountPath: /kmip/ca
            # For more information about Pod and container resource management, see:
            # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            resources:
              limits:
                cpu: "2"
                memory: 2Gi
              requests:
                cpu: "1"
                memory: 1Gi
        #volumes:
        #  - name: mongodb-kmip-client-pem
        #    secret:
        #      secretName: mongodb-kmip-client-pem
        #  - name: mongodb-kmip-certificate-authority-pem
        #    configMap:
        #      name: mongodb-kmip-certificate-authority-pem
        #      items:
        #        - key: ca.pem
        #          path: ca.pem

    #persistence:
      #single:
      #  storage: 10Gi
      #multiple:
      #  data:
      #    storage: 10Gi
      #  journal:
      #    storage: 1Gi
      #    labelSelector:
      #      matchLabels:
      #        app: "my-app"
      #  logs:
      #    storage: 500M
      #    storageClass: standard
  
  # This will create a TLS enabled Replica Set, which means that all the traffic
  # between members of the Replica Set and clients, will be encrypted using TLS
  # certificates.
  security:
    # The operator will look for a secret name mdb-mongodb-cluster-1-cert
    #certsSecretPrefix: mdb
    tls:
      enabled: false
    #  ca: ca-issuer
    authentication:
      enabled: true
       # Valid authentication modes are "SCRAM', "SCRAM-SHA-1", "MONGODB-CR", "X509" and "LDAP"
      modes: ["SCRAM"]
  
  agent:
    startupOptions:
      logLevel: DEBUG

  backup:
    mode: enabled
    snapshotSchedule:
      snapshotIntervalHours: 12
      snapshotRetentionDays: 2
      dailySnapshotRetentionDays: 2
      pointInTimeWindowHours: 60
      referenceHourOfDay: 18
      referenceMinuteOfHour: 0

  # The default TLS mode is 'requireTLS' but it can be customized using the
  # the `additionalMongodConfig` structure. Please find more information here:
  # https://docs.mongodb.com/manual/reference/configuration-options/#net.ssl.mode
  additionalMongodConfig:
    #net:
    #  ssl:
    #    mode: requireSSL
    #kmip:
    #  clientCertificateFile: /kmip/cert/cert.pem
    #  serverCAFile: /kmip/ca/ca.pem
    #  serverName: pykmip-server.pymongo
    #  port: 5696